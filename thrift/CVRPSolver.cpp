/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CVRPSolver.h"




CVRPSolver_solveCVRP_args::~CVRPSolver_solveCVRP_args() throw() {
}


uint32_t CVRPSolver_solveCVRP_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vec.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->vec.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              {
                this->vec[_i4].clear();
                uint32_t _size5;
                ::apache::thrift::protocol::TType _etype8;
                xfer += iprot->readListBegin(_etype8, _size5);
                this->vec[_i4].resize(_size5);
                uint32_t _i9;
                for (_i9 = 0; _i9 < _size5; ++_i9)
                {
                  xfer += iprot->readI64(this->vec[_i4][_i9]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->demands.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->demands.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readI64(this->demands[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.demands = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->v_caps.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->v_caps.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += iprot->readI64(this->v_caps[_i19]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.v_caps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CVRPSolver_solveCVRP_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CVRPSolver_solveCVRP_args");

  xfer += oprot->writeFieldBegin("vec", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->vec.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter20;
    for (_iter20 = this->vec.begin(); _iter20 != this->vec.end(); ++_iter20)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter20).size()));
        std::vector<int64_t> ::const_iterator _iter21;
        for (_iter21 = (*_iter20).begin(); _iter21 != (*_iter20).end(); ++_iter21)
        {
          xfer += oprot->writeI64((*_iter21));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demands", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->demands.size()));
    std::vector<int64_t> ::const_iterator _iter22;
    for (_iter22 = this->demands.begin(); _iter22 != this->demands.end(); ++_iter22)
    {
      xfer += oprot->writeI64((*_iter22));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_caps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->v_caps.size()));
    std::vector<int64_t> ::const_iterator _iter23;
    for (_iter23 = this->v_caps.begin(); _iter23 != this->v_caps.end(); ++_iter23)
    {
      xfer += oprot->writeI64((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


CVRPSolver_solveCVRP_pargs::~CVRPSolver_solveCVRP_pargs() throw() {
}


uint32_t CVRPSolver_solveCVRP_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CVRPSolver_solveCVRP_pargs");

  xfer += oprot->writeFieldBegin("vec", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->vec)).size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter24;
    for (_iter24 = (*(this->vec)).begin(); _iter24 != (*(this->vec)).end(); ++_iter24)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter24).size()));
        std::vector<int64_t> ::const_iterator _iter25;
        for (_iter25 = (*_iter24).begin(); _iter25 != (*_iter24).end(); ++_iter25)
        {
          xfer += oprot->writeI64((*_iter25));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demands", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->demands)).size()));
    std::vector<int64_t> ::const_iterator _iter26;
    for (_iter26 = (*(this->demands)).begin(); _iter26 != (*(this->demands)).end(); ++_iter26)
    {
      xfer += oprot->writeI64((*_iter26));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_caps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->v_caps)).size()));
    std::vector<int64_t> ::const_iterator _iter27;
    for (_iter27 = (*(this->v_caps)).begin(); _iter27 != (*(this->v_caps)).end(); ++_iter27)
    {
      xfer += oprot->writeI64((*_iter27));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


CVRPSolver_solveCVRP_result::~CVRPSolver_solveCVRP_result() throw() {
}


uint32_t CVRPSolver_solveCVRP_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->success.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              {
                this->success[_i32].clear();
                uint32_t _size33;
                ::apache::thrift::protocol::TType _etype36;
                xfer += iprot->readListBegin(_etype36, _size33);
                this->success[_i32].resize(_size33);
                uint32_t _i37;
                for (_i37 = 0; _i37 < _size33; ++_i37)
                {
                  xfer += iprot->readI64(this->success[_i32][_i37]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CVRPSolver_solveCVRP_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("CVRPSolver_solveCVRP_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->success.size()));
      std::vector<std::vector<int64_t> > ::const_iterator _iter38;
      for (_iter38 = this->success.begin(); _iter38 != this->success.end(); ++_iter38)
      {
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter38).size()));
          std::vector<int64_t> ::const_iterator _iter39;
          for (_iter39 = (*_iter38).begin(); _iter39 != (*_iter38).end(); ++_iter39)
          {
            xfer += oprot->writeI64((*_iter39));
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


CVRPSolver_solveCVRP_presult::~CVRPSolver_solveCVRP_presult() throw() {
}


uint32_t CVRPSolver_solveCVRP_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _etype43;
            xfer += iprot->readListBegin(_etype43, _size40);
            (*(this->success)).resize(_size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              {
                (*(this->success))[_i44].clear();
                uint32_t _size45;
                ::apache::thrift::protocol::TType _etype48;
                xfer += iprot->readListBegin(_etype48, _size45);
                (*(this->success))[_i44].resize(_size45);
                uint32_t _i49;
                for (_i49 = 0; _i49 < _size45; ++_i49)
                {
                  xfer += iprot->readI64((*(this->success))[_i44][_i49]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


CVRPSolver_solveCVRPTW_args::~CVRPSolver_solveCVRPTW_args() throw() {
}


uint32_t CVRPSolver_solveCVRPTW_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vec.clear();
            uint32_t _size50;
            ::apache::thrift::protocol::TType _etype53;
            xfer += iprot->readListBegin(_etype53, _size50);
            this->vec.resize(_size50);
            uint32_t _i54;
            for (_i54 = 0; _i54 < _size50; ++_i54)
            {
              {
                this->vec[_i54].clear();
                uint32_t _size55;
                ::apache::thrift::protocol::TType _etype58;
                xfer += iprot->readListBegin(_etype58, _size55);
                this->vec[_i54].resize(_size55);
                uint32_t _i59;
                for (_i59 = 0; _i59 < _size55; ++_i59)
                {
                  xfer += iprot->readI64(this->vec[_i54][_i59]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->demands.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _etype63;
            xfer += iprot->readListBegin(_etype63, _size60);
            this->demands.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              xfer += iprot->readI64(this->demands[_i64]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.demands = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->v_caps.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _etype68;
            xfer += iprot->readListBegin(_etype68, _size65);
            this->v_caps.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += iprot->readI64(this->v_caps[_i69]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.v_caps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->timeWindows.clear();
            uint32_t _size70;
            ::apache::thrift::protocol::TType _etype73;
            xfer += iprot->readListBegin(_etype73, _size70);
            this->timeWindows.resize(_size70);
            uint32_t _i74;
            for (_i74 = 0; _i74 < _size70; ++_i74)
            {
              {
                this->timeWindows[_i74].clear();
                uint32_t _size75;
                ::apache::thrift::protocol::TType _etype78;
                xfer += iprot->readListBegin(_etype78, _size75);
                this->timeWindows[_i74].resize(_size75);
                uint32_t _i79;
                for (_i79 = 0; _i79 < _size75; ++_i79)
                {
                  xfer += iprot->readI64(this->timeWindows[_i74][_i79]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.timeWindows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->serviceTime.clear();
            uint32_t _size80;
            ::apache::thrift::protocol::TType _etype83;
            xfer += iprot->readListBegin(_etype83, _size80);
            this->serviceTime.resize(_size80);
            uint32_t _i84;
            for (_i84 = 0; _i84 < _size80; ++_i84)
            {
              xfer += iprot->readI64(this->serviceTime[_i84]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.serviceTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vehWindows.clear();
            uint32_t _size85;
            ::apache::thrift::protocol::TType _etype88;
            xfer += iprot->readListBegin(_etype88, _size85);
            this->vehWindows.resize(_size85);
            uint32_t _i89;
            for (_i89 = 0; _i89 < _size85; ++_i89)
            {
              {
                this->vehWindows[_i89].clear();
                uint32_t _size90;
                ::apache::thrift::protocol::TType _etype93;
                xfer += iprot->readListBegin(_etype93, _size90);
                this->vehWindows[_i89].resize(_size90);
                uint32_t _i94;
                for (_i94 = 0; _i94 < _size90; ++_i94)
                {
                  xfer += iprot->readI64(this->vehWindows[_i89][_i94]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vehWindows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CVRPSolver_solveCVRPTW_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CVRPSolver_solveCVRPTW_args");

  xfer += oprot->writeFieldBegin("vec", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->vec.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter95;
    for (_iter95 = this->vec.begin(); _iter95 != this->vec.end(); ++_iter95)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter95).size()));
        std::vector<int64_t> ::const_iterator _iter96;
        for (_iter96 = (*_iter95).begin(); _iter96 != (*_iter95).end(); ++_iter96)
        {
          xfer += oprot->writeI64((*_iter96));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demands", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->demands.size()));
    std::vector<int64_t> ::const_iterator _iter97;
    for (_iter97 = this->demands.begin(); _iter97 != this->demands.end(); ++_iter97)
    {
      xfer += oprot->writeI64((*_iter97));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_caps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->v_caps.size()));
    std::vector<int64_t> ::const_iterator _iter98;
    for (_iter98 = this->v_caps.begin(); _iter98 != this->v_caps.end(); ++_iter98)
    {
      xfer += oprot->writeI64((*_iter98));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeWindows", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->timeWindows.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter99;
    for (_iter99 = this->timeWindows.begin(); _iter99 != this->timeWindows.end(); ++_iter99)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter99).size()));
        std::vector<int64_t> ::const_iterator _iter100;
        for (_iter100 = (*_iter99).begin(); _iter100 != (*_iter99).end(); ++_iter100)
        {
          xfer += oprot->writeI64((*_iter100));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceTime", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->serviceTime.size()));
    std::vector<int64_t> ::const_iterator _iter101;
    for (_iter101 = this->serviceTime.begin(); _iter101 != this->serviceTime.end(); ++_iter101)
    {
      xfer += oprot->writeI64((*_iter101));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehWindows", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->vehWindows.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter102;
    for (_iter102 = this->vehWindows.begin(); _iter102 != this->vehWindows.end(); ++_iter102)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter102).size()));
        std::vector<int64_t> ::const_iterator _iter103;
        for (_iter103 = (*_iter102).begin(); _iter103 != (*_iter102).end(); ++_iter103)
        {
          xfer += oprot->writeI64((*_iter103));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


CVRPSolver_solveCVRPTW_pargs::~CVRPSolver_solveCVRPTW_pargs() throw() {
}


uint32_t CVRPSolver_solveCVRPTW_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CVRPSolver_solveCVRPTW_pargs");

  xfer += oprot->writeFieldBegin("vec", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->vec)).size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter104;
    for (_iter104 = (*(this->vec)).begin(); _iter104 != (*(this->vec)).end(); ++_iter104)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter104).size()));
        std::vector<int64_t> ::const_iterator _iter105;
        for (_iter105 = (*_iter104).begin(); _iter105 != (*_iter104).end(); ++_iter105)
        {
          xfer += oprot->writeI64((*_iter105));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demands", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->demands)).size()));
    std::vector<int64_t> ::const_iterator _iter106;
    for (_iter106 = (*(this->demands)).begin(); _iter106 != (*(this->demands)).end(); ++_iter106)
    {
      xfer += oprot->writeI64((*_iter106));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_caps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->v_caps)).size()));
    std::vector<int64_t> ::const_iterator _iter107;
    for (_iter107 = (*(this->v_caps)).begin(); _iter107 != (*(this->v_caps)).end(); ++_iter107)
    {
      xfer += oprot->writeI64((*_iter107));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeWindows", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->timeWindows)).size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter108;
    for (_iter108 = (*(this->timeWindows)).begin(); _iter108 != (*(this->timeWindows)).end(); ++_iter108)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter108).size()));
        std::vector<int64_t> ::const_iterator _iter109;
        for (_iter109 = (*_iter108).begin(); _iter109 != (*_iter108).end(); ++_iter109)
        {
          xfer += oprot->writeI64((*_iter109));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceTime", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->serviceTime)).size()));
    std::vector<int64_t> ::const_iterator _iter110;
    for (_iter110 = (*(this->serviceTime)).begin(); _iter110 != (*(this->serviceTime)).end(); ++_iter110)
    {
      xfer += oprot->writeI64((*_iter110));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehWindows", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->vehWindows)).size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter111;
    for (_iter111 = (*(this->vehWindows)).begin(); _iter111 != (*(this->vehWindows)).end(); ++_iter111)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter111).size()));
        std::vector<int64_t> ::const_iterator _iter112;
        for (_iter112 = (*_iter111).begin(); _iter112 != (*_iter111).end(); ++_iter112)
        {
          xfer += oprot->writeI64((*_iter112));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


CVRPSolver_solveCVRPTW_result::~CVRPSolver_solveCVRPTW_result() throw() {
}


uint32_t CVRPSolver_solveCVRPTW_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size113;
            ::apache::thrift::protocol::TType _etype116;
            xfer += iprot->readListBegin(_etype116, _size113);
            this->success.resize(_size113);
            uint32_t _i117;
            for (_i117 = 0; _i117 < _size113; ++_i117)
            {
              {
                this->success[_i117].clear();
                uint32_t _size118;
                ::apache::thrift::protocol::TType _etype121;
                xfer += iprot->readListBegin(_etype121, _size118);
                this->success[_i117].resize(_size118);
                uint32_t _i122;
                for (_i122 = 0; _i122 < _size118; ++_i122)
                {
                  xfer += iprot->readI64(this->success[_i117][_i122]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CVRPSolver_solveCVRPTW_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("CVRPSolver_solveCVRPTW_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->success.size()));
      std::vector<std::vector<int64_t> > ::const_iterator _iter123;
      for (_iter123 = this->success.begin(); _iter123 != this->success.end(); ++_iter123)
      {
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter123).size()));
          std::vector<int64_t> ::const_iterator _iter124;
          for (_iter124 = (*_iter123).begin(); _iter124 != (*_iter123).end(); ++_iter124)
          {
            xfer += oprot->writeI64((*_iter124));
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


CVRPSolver_solveCVRPTW_presult::~CVRPSolver_solveCVRPTW_presult() throw() {
}


uint32_t CVRPSolver_solveCVRPTW_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size125;
            ::apache::thrift::protocol::TType _etype128;
            xfer += iprot->readListBegin(_etype128, _size125);
            (*(this->success)).resize(_size125);
            uint32_t _i129;
            for (_i129 = 0; _i129 < _size125; ++_i129)
            {
              {
                (*(this->success))[_i129].clear();
                uint32_t _size130;
                ::apache::thrift::protocol::TType _etype133;
                xfer += iprot->readListBegin(_etype133, _size130);
                (*(this->success))[_i129].resize(_size130);
                uint32_t _i134;
                for (_i134 = 0; _i134 < _size130; ++_i134)
                {
                  xfer += iprot->readI64((*(this->success))[_i129][_i134]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


CVRPSolver_solveCVRPTWMD_args::~CVRPSolver_solveCVRPTWMD_args() throw() {
}


uint32_t CVRPSolver_solveCVRPTWMD_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vec.clear();
            uint32_t _size135;
            ::apache::thrift::protocol::TType _etype138;
            xfer += iprot->readListBegin(_etype138, _size135);
            this->vec.resize(_size135);
            uint32_t _i139;
            for (_i139 = 0; _i139 < _size135; ++_i139)
            {
              {
                this->vec[_i139].clear();
                uint32_t _size140;
                ::apache::thrift::protocol::TType _etype143;
                xfer += iprot->readListBegin(_etype143, _size140);
                this->vec[_i139].resize(_size140);
                uint32_t _i144;
                for (_i144 = 0; _i144 < _size140; ++_i144)
                {
                  xfer += iprot->readI64(this->vec[_i139][_i144]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->demands.clear();
            uint32_t _size145;
            ::apache::thrift::protocol::TType _etype148;
            xfer += iprot->readListBegin(_etype148, _size145);
            this->demands.resize(_size145);
            uint32_t _i149;
            for (_i149 = 0; _i149 < _size145; ++_i149)
            {
              xfer += iprot->readI64(this->demands[_i149]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.demands = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->v_caps.clear();
            uint32_t _size150;
            ::apache::thrift::protocol::TType _etype153;
            xfer += iprot->readListBegin(_etype153, _size150);
            this->v_caps.resize(_size150);
            uint32_t _i154;
            for (_i154 = 0; _i154 < _size150; ++_i154)
            {
              xfer += iprot->readI64(this->v_caps[_i154]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.v_caps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->timeWindows.clear();
            uint32_t _size155;
            ::apache::thrift::protocol::TType _etype158;
            xfer += iprot->readListBegin(_etype158, _size155);
            this->timeWindows.resize(_size155);
            uint32_t _i159;
            for (_i159 = 0; _i159 < _size155; ++_i159)
            {
              {
                this->timeWindows[_i159].clear();
                uint32_t _size160;
                ::apache::thrift::protocol::TType _etype163;
                xfer += iprot->readListBegin(_etype163, _size160);
                this->timeWindows[_i159].resize(_size160);
                uint32_t _i164;
                for (_i164 = 0; _i164 < _size160; ++_i164)
                {
                  xfer += iprot->readI64(this->timeWindows[_i159][_i164]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.timeWindows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->serviceTime.clear();
            uint32_t _size165;
            ::apache::thrift::protocol::TType _etype168;
            xfer += iprot->readListBegin(_etype168, _size165);
            this->serviceTime.resize(_size165);
            uint32_t _i169;
            for (_i169 = 0; _i169 < _size165; ++_i169)
            {
              xfer += iprot->readI64(this->serviceTime[_i169]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.serviceTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->depots.clear();
            uint32_t _size170;
            ::apache::thrift::protocol::TType _etype173;
            xfer += iprot->readListBegin(_etype173, _size170);
            this->depots.resize(_size170);
            uint32_t _i174;
            for (_i174 = 0; _i174 < _size170; ++_i174)
            {
              {
                this->depots[_i174].clear();
                uint32_t _size175;
                ::apache::thrift::protocol::TType _etype178;
                xfer += iprot->readListBegin(_etype178, _size175);
                this->depots[_i174].resize(_size175);
                uint32_t _i179;
                for (_i179 = 0; _i179 < _size175; ++_i179)
                {
                  xfer += iprot->readI64(this->depots[_i174][_i179]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.depots = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CVRPSolver_solveCVRPTWMD_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CVRPSolver_solveCVRPTWMD_args");

  xfer += oprot->writeFieldBegin("vec", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->vec.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter180;
    for (_iter180 = this->vec.begin(); _iter180 != this->vec.end(); ++_iter180)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter180).size()));
        std::vector<int64_t> ::const_iterator _iter181;
        for (_iter181 = (*_iter180).begin(); _iter181 != (*_iter180).end(); ++_iter181)
        {
          xfer += oprot->writeI64((*_iter181));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demands", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->demands.size()));
    std::vector<int64_t> ::const_iterator _iter182;
    for (_iter182 = this->demands.begin(); _iter182 != this->demands.end(); ++_iter182)
    {
      xfer += oprot->writeI64((*_iter182));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_caps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->v_caps.size()));
    std::vector<int64_t> ::const_iterator _iter183;
    for (_iter183 = this->v_caps.begin(); _iter183 != this->v_caps.end(); ++_iter183)
    {
      xfer += oprot->writeI64((*_iter183));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeWindows", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->timeWindows.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter184;
    for (_iter184 = this->timeWindows.begin(); _iter184 != this->timeWindows.end(); ++_iter184)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter184).size()));
        std::vector<int64_t> ::const_iterator _iter185;
        for (_iter185 = (*_iter184).begin(); _iter185 != (*_iter184).end(); ++_iter185)
        {
          xfer += oprot->writeI64((*_iter185));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceTime", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->serviceTime.size()));
    std::vector<int64_t> ::const_iterator _iter186;
    for (_iter186 = this->serviceTime.begin(); _iter186 != this->serviceTime.end(); ++_iter186)
    {
      xfer += oprot->writeI64((*_iter186));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depots", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->depots.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter187;
    for (_iter187 = this->depots.begin(); _iter187 != this->depots.end(); ++_iter187)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter187).size()));
        std::vector<int64_t> ::const_iterator _iter188;
        for (_iter188 = (*_iter187).begin(); _iter188 != (*_iter187).end(); ++_iter188)
        {
          xfer += oprot->writeI64((*_iter188));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


CVRPSolver_solveCVRPTWMD_pargs::~CVRPSolver_solveCVRPTWMD_pargs() throw() {
}


uint32_t CVRPSolver_solveCVRPTWMD_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CVRPSolver_solveCVRPTWMD_pargs");

  xfer += oprot->writeFieldBegin("vec", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->vec)).size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter189;
    for (_iter189 = (*(this->vec)).begin(); _iter189 != (*(this->vec)).end(); ++_iter189)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter189).size()));
        std::vector<int64_t> ::const_iterator _iter190;
        for (_iter190 = (*_iter189).begin(); _iter190 != (*_iter189).end(); ++_iter190)
        {
          xfer += oprot->writeI64((*_iter190));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demands", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->demands)).size()));
    std::vector<int64_t> ::const_iterator _iter191;
    for (_iter191 = (*(this->demands)).begin(); _iter191 != (*(this->demands)).end(); ++_iter191)
    {
      xfer += oprot->writeI64((*_iter191));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_caps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->v_caps)).size()));
    std::vector<int64_t> ::const_iterator _iter192;
    for (_iter192 = (*(this->v_caps)).begin(); _iter192 != (*(this->v_caps)).end(); ++_iter192)
    {
      xfer += oprot->writeI64((*_iter192));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeWindows", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->timeWindows)).size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter193;
    for (_iter193 = (*(this->timeWindows)).begin(); _iter193 != (*(this->timeWindows)).end(); ++_iter193)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter193).size()));
        std::vector<int64_t> ::const_iterator _iter194;
        for (_iter194 = (*_iter193).begin(); _iter194 != (*_iter193).end(); ++_iter194)
        {
          xfer += oprot->writeI64((*_iter194));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceTime", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->serviceTime)).size()));
    std::vector<int64_t> ::const_iterator _iter195;
    for (_iter195 = (*(this->serviceTime)).begin(); _iter195 != (*(this->serviceTime)).end(); ++_iter195)
    {
      xfer += oprot->writeI64((*_iter195));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depots", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->depots)).size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter196;
    for (_iter196 = (*(this->depots)).begin(); _iter196 != (*(this->depots)).end(); ++_iter196)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter196).size()));
        std::vector<int64_t> ::const_iterator _iter197;
        for (_iter197 = (*_iter196).begin(); _iter197 != (*_iter196).end(); ++_iter197)
        {
          xfer += oprot->writeI64((*_iter197));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


CVRPSolver_solveCVRPTWMD_result::~CVRPSolver_solveCVRPTWMD_result() throw() {
}


uint32_t CVRPSolver_solveCVRPTWMD_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size198;
            ::apache::thrift::protocol::TType _etype201;
            xfer += iprot->readListBegin(_etype201, _size198);
            this->success.resize(_size198);
            uint32_t _i202;
            for (_i202 = 0; _i202 < _size198; ++_i202)
            {
              {
                this->success[_i202].clear();
                uint32_t _size203;
                ::apache::thrift::protocol::TType _etype206;
                xfer += iprot->readListBegin(_etype206, _size203);
                this->success[_i202].resize(_size203);
                uint32_t _i207;
                for (_i207 = 0; _i207 < _size203; ++_i207)
                {
                  xfer += iprot->readI64(this->success[_i202][_i207]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CVRPSolver_solveCVRPTWMD_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("CVRPSolver_solveCVRPTWMD_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->success.size()));
      std::vector<std::vector<int64_t> > ::const_iterator _iter208;
      for (_iter208 = this->success.begin(); _iter208 != this->success.end(); ++_iter208)
      {
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter208).size()));
          std::vector<int64_t> ::const_iterator _iter209;
          for (_iter209 = (*_iter208).begin(); _iter209 != (*_iter208).end(); ++_iter209)
          {
            xfer += oprot->writeI64((*_iter209));
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


CVRPSolver_solveCVRPTWMD_presult::~CVRPSolver_solveCVRPTWMD_presult() throw() {
}


uint32_t CVRPSolver_solveCVRPTWMD_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size210;
            ::apache::thrift::protocol::TType _etype213;
            xfer += iprot->readListBegin(_etype213, _size210);
            (*(this->success)).resize(_size210);
            uint32_t _i214;
            for (_i214 = 0; _i214 < _size210; ++_i214)
            {
              {
                (*(this->success))[_i214].clear();
                uint32_t _size215;
                ::apache::thrift::protocol::TType _etype218;
                xfer += iprot->readListBegin(_etype218, _size215);
                (*(this->success))[_i214].resize(_size215);
                uint32_t _i219;
                for (_i219 = 0; _i219 < _size215; ++_i219)
                {
                  xfer += iprot->readI64((*(this->success))[_i214][_i219]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

void CVRPSolverClient::solveCVRP(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps)
{
  send_solveCVRP(vec, demands, v_caps);
  recv_solveCVRP(_return);
}

void CVRPSolverClient::send_solveCVRP(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("solveCVRP", ::apache::thrift::protocol::T_CALL, cseqid);

  CVRPSolver_solveCVRP_pargs args;
  args.vec = &vec;
  args.demands = &demands;
  args.v_caps = &v_caps;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void CVRPSolverClient::recv_solveCVRP(std::vector<std::vector<int64_t> > & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("solveCVRP") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  CVRPSolver_solveCVRP_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "solveCVRP failed: unknown result");
}

void CVRPSolverClient::solveCVRPTW(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<std::vector<int64_t> > & vehWindows)
{
  send_solveCVRPTW(vec, demands, v_caps, timeWindows, serviceTime, vehWindows);
  recv_solveCVRPTW(_return);
}

void CVRPSolverClient::send_solveCVRPTW(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<std::vector<int64_t> > & vehWindows)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("solveCVRPTW", ::apache::thrift::protocol::T_CALL, cseqid);

  CVRPSolver_solveCVRPTW_pargs args;
  args.vec = &vec;
  args.demands = &demands;
  args.v_caps = &v_caps;
  args.timeWindows = &timeWindows;
  args.serviceTime = &serviceTime;
  args.vehWindows = &vehWindows;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void CVRPSolverClient::recv_solveCVRPTW(std::vector<std::vector<int64_t> > & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("solveCVRPTW") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  CVRPSolver_solveCVRPTW_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "solveCVRPTW failed: unknown result");
}

void CVRPSolverClient::solveCVRPTWMD(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<std::vector<int64_t> > & depots)
{
  send_solveCVRPTWMD(vec, demands, v_caps, timeWindows, serviceTime, depots);
  recv_solveCVRPTWMD(_return);
}

void CVRPSolverClient::send_solveCVRPTWMD(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<std::vector<int64_t> > & depots)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("solveCVRPTWMD", ::apache::thrift::protocol::T_CALL, cseqid);

  CVRPSolver_solveCVRPTWMD_pargs args;
  args.vec = &vec;
  args.demands = &demands;
  args.v_caps = &v_caps;
  args.timeWindows = &timeWindows;
  args.serviceTime = &serviceTime;
  args.depots = &depots;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void CVRPSolverClient::recv_solveCVRPTWMD(std::vector<std::vector<int64_t> > & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("solveCVRPTWMD") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  CVRPSolver_solveCVRPTWMD_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "solveCVRPTWMD failed: unknown result");
}

bool CVRPSolverProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void CVRPSolverProcessor::process_solveCVRP(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("CVRPSolver.solveCVRP", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "CVRPSolver.solveCVRP");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "CVRPSolver.solveCVRP");
  }

  CVRPSolver_solveCVRP_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "CVRPSolver.solveCVRP", bytes);
  }

  CVRPSolver_solveCVRP_result result;
  try {
    iface_->solveCVRP(result.success, args.vec, args.demands, args.v_caps);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "CVRPSolver.solveCVRP");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("solveCVRP", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "CVRPSolver.solveCVRP");
  }

  oprot->writeMessageBegin("solveCVRP", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "CVRPSolver.solveCVRP", bytes);
  }
}

void CVRPSolverProcessor::process_solveCVRPTW(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("CVRPSolver.solveCVRPTW", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "CVRPSolver.solveCVRPTW");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "CVRPSolver.solveCVRPTW");
  }

  CVRPSolver_solveCVRPTW_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "CVRPSolver.solveCVRPTW", bytes);
  }

  CVRPSolver_solveCVRPTW_result result;
  try {
    iface_->solveCVRPTW(result.success, args.vec, args.demands, args.v_caps, args.timeWindows, args.serviceTime, args.vehWindows);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "CVRPSolver.solveCVRPTW");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("solveCVRPTW", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "CVRPSolver.solveCVRPTW");
  }

  oprot->writeMessageBegin("solveCVRPTW", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "CVRPSolver.solveCVRPTW", bytes);
  }
}

void CVRPSolverProcessor::process_solveCVRPTWMD(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("CVRPSolver.solveCVRPTWMD", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "CVRPSolver.solveCVRPTWMD");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "CVRPSolver.solveCVRPTWMD");
  }

  CVRPSolver_solveCVRPTWMD_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "CVRPSolver.solveCVRPTWMD", bytes);
  }

  CVRPSolver_solveCVRPTWMD_result result;
  try {
    iface_->solveCVRPTWMD(result.success, args.vec, args.demands, args.v_caps, args.timeWindows, args.serviceTime, args.depots);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "CVRPSolver.solveCVRPTWMD");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("solveCVRPTWMD", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "CVRPSolver.solveCVRPTWMD");
  }

  oprot->writeMessageBegin("solveCVRPTWMD", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "CVRPSolver.solveCVRPTWMD", bytes);
  }
}

::boost::shared_ptr< ::apache::thrift::TProcessor > CVRPSolverProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< CVRPSolverIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< CVRPSolverIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new CVRPSolverProcessor(handler));
  return processor;
}

void CVRPSolverConcurrentClient::solveCVRP(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps)
{
  int32_t seqid = send_solveCVRP(vec, demands, v_caps);
  recv_solveCVRP(_return, seqid);
}

int32_t CVRPSolverConcurrentClient::send_solveCVRP(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("solveCVRP", ::apache::thrift::protocol::T_CALL, cseqid);

  CVRPSolver_solveCVRP_pargs args;
  args.vec = &vec;
  args.demands = &demands;
  args.v_caps = &v_caps;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void CVRPSolverConcurrentClient::recv_solveCVRP(std::vector<std::vector<int64_t> > & _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("solveCVRP") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      CVRPSolver_solveCVRP_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "solveCVRP failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void CVRPSolverConcurrentClient::solveCVRPTW(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<std::vector<int64_t> > & vehWindows)
{
  int32_t seqid = send_solveCVRPTW(vec, demands, v_caps, timeWindows, serviceTime, vehWindows);
  recv_solveCVRPTW(_return, seqid);
}

int32_t CVRPSolverConcurrentClient::send_solveCVRPTW(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<std::vector<int64_t> > & vehWindows)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("solveCVRPTW", ::apache::thrift::protocol::T_CALL, cseqid);

  CVRPSolver_solveCVRPTW_pargs args;
  args.vec = &vec;
  args.demands = &demands;
  args.v_caps = &v_caps;
  args.timeWindows = &timeWindows;
  args.serviceTime = &serviceTime;
  args.vehWindows = &vehWindows;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void CVRPSolverConcurrentClient::recv_solveCVRPTW(std::vector<std::vector<int64_t> > & _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("solveCVRPTW") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      CVRPSolver_solveCVRPTW_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "solveCVRPTW failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

void CVRPSolverConcurrentClient::solveCVRPTWMD(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<std::vector<int64_t> > & depots)
{
  int32_t seqid = send_solveCVRPTWMD(vec, demands, v_caps, timeWindows, serviceTime, depots);
  recv_solveCVRPTWMD(_return, seqid);
}

int32_t CVRPSolverConcurrentClient::send_solveCVRPTWMD(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps, const std::vector<std::vector<int64_t> > & timeWindows, const std::vector<int64_t> & serviceTime, const std::vector<std::vector<int64_t> > & depots)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("solveCVRPTWMD", ::apache::thrift::protocol::T_CALL, cseqid);

  CVRPSolver_solveCVRPTWMD_pargs args;
  args.vec = &vec;
  args.demands = &demands;
  args.v_caps = &v_caps;
  args.timeWindows = &timeWindows;
  args.serviceTime = &serviceTime;
  args.depots = &depots;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void CVRPSolverConcurrentClient::recv_solveCVRPTWMD(std::vector<std::vector<int64_t> > & _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("solveCVRPTWMD") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      CVRPSolver_solveCVRPTWMD_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "solveCVRPTWMD failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}



