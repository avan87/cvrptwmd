/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "cvrptw_model_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




CVRPTWData::~CVRPTWData() throw() {
}


void CVRPTWData::__set_vec(const std::vector<std::vector<int64_t> > & val) {
  this->vec = val;
}

void CVRPTWData::__set_demands(const std::vector<int64_t> & val) {
  this->demands = val;
}

void CVRPTWData::__set_v_caps(const std::vector<int64_t> & val) {
  this->v_caps = val;
}

void CVRPTWData::__set_timeWindows(const std::vector<std::vector<int64_t> > & val) {
  this->timeWindows = val;
}

void CVRPTWData::__set_serviceTime(const std::vector<int64_t> & val) {
  this->serviceTime = val;
}

void CVRPTWData::__set_vehWindows(const std::vector<std::vector<int64_t> > & val) {
  this->vehWindows = val;
}

void CVRPTWData::__set_depots(const std::vector<std::vector<int64_t> > & val) {
  this->depots = val;
}

void CVRPTWData::__set_taskType(const std::string& val) {
  this->taskType = val;
}

uint32_t CVRPTWData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vec.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->vec.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              {
                this->vec[_i4].clear();
                uint32_t _size5;
                ::apache::thrift::protocol::TType _etype8;
                xfer += iprot->readListBegin(_etype8, _size5);
                this->vec[_i4].resize(_size5);
                uint32_t _i9;
                for (_i9 = 0; _i9 < _size5; ++_i9)
                {
                  xfer += iprot->readI64(this->vec[_i4][_i9]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->demands.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->demands.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readI64(this->demands[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.demands = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->v_caps.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->v_caps.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += iprot->readI64(this->v_caps[_i19]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.v_caps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->timeWindows.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            xfer += iprot->readListBegin(_etype23, _size20);
            this->timeWindows.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              {
                this->timeWindows[_i24].clear();
                uint32_t _size25;
                ::apache::thrift::protocol::TType _etype28;
                xfer += iprot->readListBegin(_etype28, _size25);
                this->timeWindows[_i24].resize(_size25);
                uint32_t _i29;
                for (_i29 = 0; _i29 < _size25; ++_i29)
                {
                  xfer += iprot->readI64(this->timeWindows[_i24][_i29]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.timeWindows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->serviceTime.clear();
            uint32_t _size30;
            ::apache::thrift::protocol::TType _etype33;
            xfer += iprot->readListBegin(_etype33, _size30);
            this->serviceTime.resize(_size30);
            uint32_t _i34;
            for (_i34 = 0; _i34 < _size30; ++_i34)
            {
              xfer += iprot->readI64(this->serviceTime[_i34]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.serviceTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vehWindows.clear();
            uint32_t _size35;
            ::apache::thrift::protocol::TType _etype38;
            xfer += iprot->readListBegin(_etype38, _size35);
            this->vehWindows.resize(_size35);
            uint32_t _i39;
            for (_i39 = 0; _i39 < _size35; ++_i39)
            {
              {
                this->vehWindows[_i39].clear();
                uint32_t _size40;
                ::apache::thrift::protocol::TType _etype43;
                xfer += iprot->readListBegin(_etype43, _size40);
                this->vehWindows[_i39].resize(_size40);
                uint32_t _i44;
                for (_i44 = 0; _i44 < _size40; ++_i44)
                {
                  xfer += iprot->readI64(this->vehWindows[_i39][_i44]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vehWindows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->depots.clear();
            uint32_t _size45;
            ::apache::thrift::protocol::TType _etype48;
            xfer += iprot->readListBegin(_etype48, _size45);
            this->depots.resize(_size45);
            uint32_t _i49;
            for (_i49 = 0; _i49 < _size45; ++_i49)
            {
              {
                this->depots[_i49].clear();
                uint32_t _size50;
                ::apache::thrift::protocol::TType _etype53;
                xfer += iprot->readListBegin(_etype53, _size50);
                this->depots[_i49].resize(_size50);
                uint32_t _i54;
                for (_i54 = 0; _i54 < _size50; ++_i54)
                {
                  xfer += iprot->readI64(this->depots[_i49][_i54]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.depots = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->taskType);
          this->__isset.taskType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CVRPTWData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CVRPTWData");

  xfer += oprot->writeFieldBegin("vec", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->vec.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter55;
    for (_iter55 = this->vec.begin(); _iter55 != this->vec.end(); ++_iter55)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter55).size()));
        std::vector<int64_t> ::const_iterator _iter56;
        for (_iter56 = (*_iter55).begin(); _iter56 != (*_iter55).end(); ++_iter56)
        {
          xfer += oprot->writeI64((*_iter56));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demands", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->demands.size()));
    std::vector<int64_t> ::const_iterator _iter57;
    for (_iter57 = this->demands.begin(); _iter57 != this->demands.end(); ++_iter57)
    {
      xfer += oprot->writeI64((*_iter57));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_caps", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->v_caps.size()));
    std::vector<int64_t> ::const_iterator _iter58;
    for (_iter58 = this->v_caps.begin(); _iter58 != this->v_caps.end(); ++_iter58)
    {
      xfer += oprot->writeI64((*_iter58));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeWindows", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->timeWindows.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter59;
    for (_iter59 = this->timeWindows.begin(); _iter59 != this->timeWindows.end(); ++_iter59)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter59).size()));
        std::vector<int64_t> ::const_iterator _iter60;
        for (_iter60 = (*_iter59).begin(); _iter60 != (*_iter59).end(); ++_iter60)
        {
          xfer += oprot->writeI64((*_iter60));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceTime", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->serviceTime.size()));
    std::vector<int64_t> ::const_iterator _iter61;
    for (_iter61 = this->serviceTime.begin(); _iter61 != this->serviceTime.end(); ++_iter61)
    {
      xfer += oprot->writeI64((*_iter61));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehWindows", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->vehWindows.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter62;
    for (_iter62 = this->vehWindows.begin(); _iter62 != this->vehWindows.end(); ++_iter62)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter62).size()));
        std::vector<int64_t> ::const_iterator _iter63;
        for (_iter63 = (*_iter62).begin(); _iter63 != (*_iter62).end(); ++_iter63)
        {
          xfer += oprot->writeI64((*_iter63));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depots", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->depots.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter64;
    for (_iter64 = this->depots.begin(); _iter64 != this->depots.end(); ++_iter64)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter64).size()));
        std::vector<int64_t> ::const_iterator _iter65;
        for (_iter65 = (*_iter64).begin(); _iter65 != (*_iter64).end(); ++_iter65)
        {
          xfer += oprot->writeI64((*_iter65));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskType", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->taskType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CVRPTWData &a, CVRPTWData &b) {
  using ::std::swap;
  swap(a.vec, b.vec);
  swap(a.demands, b.demands);
  swap(a.v_caps, b.v_caps);
  swap(a.timeWindows, b.timeWindows);
  swap(a.serviceTime, b.serviceTime);
  swap(a.vehWindows, b.vehWindows);
  swap(a.depots, b.depots);
  swap(a.taskType, b.taskType);
  swap(a.__isset, b.__isset);
}

CVRPTWData::CVRPTWData(const CVRPTWData& other66) {
  vec = other66.vec;
  demands = other66.demands;
  v_caps = other66.v_caps;
  timeWindows = other66.timeWindows;
  serviceTime = other66.serviceTime;
  vehWindows = other66.vehWindows;
  depots = other66.depots;
  taskType = other66.taskType;
  __isset = other66.__isset;
}
CVRPTWData& CVRPTWData::operator=(const CVRPTWData& other67) {
  vec = other67.vec;
  demands = other67.demands;
  v_caps = other67.v_caps;
  timeWindows = other67.timeWindows;
  serviceTime = other67.serviceTime;
  vehWindows = other67.vehWindows;
  depots = other67.depots;
  taskType = other67.taskType;
  __isset = other67.__isset;
  return *this;
}
void CVRPTWData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CVRPTWData(";
  out << "vec=" << to_string(vec);
  out << ", " << "demands=" << to_string(demands);
  out << ", " << "v_caps=" << to_string(v_caps);
  out << ", " << "timeWindows=" << to_string(timeWindows);
  out << ", " << "serviceTime=" << to_string(serviceTime);
  out << ", " << "vehWindows=" << to_string(vehWindows);
  out << ", " << "depots=" << to_string(depots);
  out << ", " << "taskType=" << to_string(taskType);
  out << ")";
}


Result::~Result() throw() {
}


void Result::__set_result(const std::vector<std::vector<int64_t> > & val) {
  this->result = val;
}

uint32_t Result::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->result.clear();
            uint32_t _size68;
            ::apache::thrift::protocol::TType _etype71;
            xfer += iprot->readListBegin(_etype71, _size68);
            this->result.resize(_size68);
            uint32_t _i72;
            for (_i72 = 0; _i72 < _size68; ++_i72)
            {
              {
                this->result[_i72].clear();
                uint32_t _size73;
                ::apache::thrift::protocol::TType _etype76;
                xfer += iprot->readListBegin(_etype76, _size73);
                this->result[_i72].resize(_size73);
                uint32_t _i77;
                for (_i77 = 0; _i77 < _size73; ++_i77)
                {
                  xfer += iprot->readI64(this->result[_i72][_i77]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Result::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Result");

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->result.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter78;
    for (_iter78 = this->result.begin(); _iter78 != this->result.end(); ++_iter78)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter78).size()));
        std::vector<int64_t> ::const_iterator _iter79;
        for (_iter79 = (*_iter78).begin(); _iter79 != (*_iter78).end(); ++_iter79)
        {
          xfer += oprot->writeI64((*_iter79));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Result &a, Result &b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.__isset, b.__isset);
}

Result::Result(const Result& other80) {
  result = other80.result;
  __isset = other80.__isset;
}
Result& Result::operator=(const Result& other81) {
  result = other81.result;
  __isset = other81.__isset;
  return *this;
}
void Result::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Result(";
  out << "result=" << to_string(result);
  out << ")";
}


