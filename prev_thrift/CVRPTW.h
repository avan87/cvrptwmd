/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CVRPTW_H
#define CVRPTW_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "cvrptw_model_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CVRPTWIf {
 public:
  virtual ~CVRPTWIf() {}
  virtual void solveCVRPTW(Result& _return, const CVRPTWData& data) = 0;
};

class CVRPTWIfFactory {
 public:
  typedef CVRPTWIf Handler;

  virtual ~CVRPTWIfFactory() {}

  virtual CVRPTWIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CVRPTWIf* /* handler */) = 0;
};

class CVRPTWIfSingletonFactory : virtual public CVRPTWIfFactory {
 public:
  CVRPTWIfSingletonFactory(const boost::shared_ptr<CVRPTWIf>& iface) : iface_(iface) {}
  virtual ~CVRPTWIfSingletonFactory() {}

  virtual CVRPTWIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CVRPTWIf* /* handler */) {}

 protected:
  boost::shared_ptr<CVRPTWIf> iface_;
};

class CVRPTWNull : virtual public CVRPTWIf {
 public:
  virtual ~CVRPTWNull() {}
  void solveCVRPTW(Result& /* _return */, const CVRPTWData& /* data */) {
    return;
  }
};

typedef struct _CVRPTW_solveCVRPTW_args__isset {
  _CVRPTW_solveCVRPTW_args__isset() : data(false) {}
  bool data :1;
} _CVRPTW_solveCVRPTW_args__isset;

class CVRPTW_solveCVRPTW_args {
 public:

  CVRPTW_solveCVRPTW_args(const CVRPTW_solveCVRPTW_args&);
  CVRPTW_solveCVRPTW_args& operator=(const CVRPTW_solveCVRPTW_args&);
  CVRPTW_solveCVRPTW_args() {
  }

  virtual ~CVRPTW_solveCVRPTW_args() throw();
  CVRPTWData data;

  _CVRPTW_solveCVRPTW_args__isset __isset;

  void __set_data(const CVRPTWData& val);

  bool operator == (const CVRPTW_solveCVRPTW_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const CVRPTW_solveCVRPTW_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CVRPTW_solveCVRPTW_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CVRPTW_solveCVRPTW_pargs {
 public:


  virtual ~CVRPTW_solveCVRPTW_pargs() throw();
  const CVRPTWData* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CVRPTW_solveCVRPTW_result__isset {
  _CVRPTW_solveCVRPTW_result__isset() : success(false) {}
  bool success :1;
} _CVRPTW_solveCVRPTW_result__isset;

class CVRPTW_solveCVRPTW_result {
 public:

  CVRPTW_solveCVRPTW_result(const CVRPTW_solveCVRPTW_result&);
  CVRPTW_solveCVRPTW_result& operator=(const CVRPTW_solveCVRPTW_result&);
  CVRPTW_solveCVRPTW_result() {
  }

  virtual ~CVRPTW_solveCVRPTW_result() throw();
  Result success;

  _CVRPTW_solveCVRPTW_result__isset __isset;

  void __set_success(const Result& val);

  bool operator == (const CVRPTW_solveCVRPTW_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CVRPTW_solveCVRPTW_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CVRPTW_solveCVRPTW_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CVRPTW_solveCVRPTW_presult__isset {
  _CVRPTW_solveCVRPTW_presult__isset() : success(false) {}
  bool success :1;
} _CVRPTW_solveCVRPTW_presult__isset;

class CVRPTW_solveCVRPTW_presult {
 public:


  virtual ~CVRPTW_solveCVRPTW_presult() throw();
  Result* success;

  _CVRPTW_solveCVRPTW_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CVRPTWClient : virtual public CVRPTWIf {
 public:
  CVRPTWClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CVRPTWClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void solveCVRPTW(Result& _return, const CVRPTWData& data);
  void send_solveCVRPTW(const CVRPTWData& data);
  void recv_solveCVRPTW(Result& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CVRPTWProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CVRPTWIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CVRPTWProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_solveCVRPTW(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CVRPTWProcessor(boost::shared_ptr<CVRPTWIf> iface) :
    iface_(iface) {
    processMap_["solveCVRPTW"] = &CVRPTWProcessor::process_solveCVRPTW;
  }

  virtual ~CVRPTWProcessor() {}
};

class CVRPTWProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CVRPTWProcessorFactory(const ::boost::shared_ptr< CVRPTWIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CVRPTWIfFactory > handlerFactory_;
};

class CVRPTWMultiface : virtual public CVRPTWIf {
 public:
  CVRPTWMultiface(std::vector<boost::shared_ptr<CVRPTWIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CVRPTWMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CVRPTWIf> > ifaces_;
  CVRPTWMultiface() {}
  void add(boost::shared_ptr<CVRPTWIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void solveCVRPTW(Result& _return, const CVRPTWData& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->solveCVRPTW(_return, data);
    }
    ifaces_[i]->solveCVRPTW(_return, data);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CVRPTWConcurrentClient : virtual public CVRPTWIf {
 public:
  CVRPTWConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CVRPTWConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void solveCVRPTW(Result& _return, const CVRPTWData& data);
  int32_t send_solveCVRPTW(const CVRPTWData& data);
  void recv_solveCVRPTW(Result& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
