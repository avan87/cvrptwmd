/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cvrptw_model_TYPES_H
#define cvrptw_model_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class CVRPTWData;

class Result;

typedef struct _CVRPTWData__isset {
  _CVRPTWData__isset() : vec(false), demands(false), v_caps(false), timeWindows(false), serviceTime(false), vehWindows(false) {}
  bool vec :1;
  bool demands :1;
  bool v_caps :1;
  bool timeWindows :1;
  bool serviceTime :1;
  bool vehWindows :1;
} _CVRPTWData__isset;

class CVRPTWData {
 public:

  CVRPTWData(const CVRPTWData&);
  CVRPTWData& operator=(const CVRPTWData&);
  CVRPTWData() {
  }

  virtual ~CVRPTWData() throw();
  std::vector<std::vector<int64_t> >  vec;
  std::vector<int64_t>  demands;
  std::vector<int64_t>  v_caps;
  std::vector<std::vector<int64_t> >  timeWindows;
  std::vector<int64_t>  serviceTime;
  std::vector<std::vector<int64_t> >  vehWindows;

  _CVRPTWData__isset __isset;

  void __set_vec(const std::vector<std::vector<int64_t> > & val);

  void __set_demands(const std::vector<int64_t> & val);

  void __set_v_caps(const std::vector<int64_t> & val);

  void __set_timeWindows(const std::vector<std::vector<int64_t> > & val);

  void __set_serviceTime(const std::vector<int64_t> & val);

  void __set_vehWindows(const std::vector<std::vector<int64_t> > & val);

  bool operator == (const CVRPTWData & rhs) const
  {
    if (!(vec == rhs.vec))
      return false;
    if (!(demands == rhs.demands))
      return false;
    if (!(v_caps == rhs.v_caps))
      return false;
    if (!(timeWindows == rhs.timeWindows))
      return false;
    if (!(serviceTime == rhs.serviceTime))
      return false;
    if (!(vehWindows == rhs.vehWindows))
      return false;
    return true;
  }
  bool operator != (const CVRPTWData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CVRPTWData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CVRPTWData &a, CVRPTWData &b);

inline std::ostream& operator<<(std::ostream& out, const CVRPTWData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Result__isset {
  _Result__isset() : objValue(false), result(false) {}
  bool objValue :1;
  bool result :1;
} _Result__isset;

class Result {
 public:

  Result(const Result&);
  Result& operator=(const Result&);
  Result() : objValue(0) {
  }

  virtual ~Result() throw();
  int64_t objValue;
  std::vector<std::vector<int64_t> >  result;

  _Result__isset __isset;

  void __set_objValue(const int64_t val);

  void __set_result(const std::vector<std::vector<int64_t> > & val);

  bool operator == (const Result & rhs) const
  {
    if (!(objValue == rhs.objValue))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const Result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Result &a, Result &b);

inline std::ostream& operator<<(std::ostream& out, const Result& obj)
{
  obj.printTo(out);
  return out;
}



#endif
